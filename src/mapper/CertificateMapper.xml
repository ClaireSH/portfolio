<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="certificate">
	<!-- 
		본래 패키지를 포함한 타입의 클래스이름명을 사용하나
		typeAlias에 등록된 Alias값을 사요할 수 도 있음
	 -->
	<resultMap type="Certificate" id="CertificateResult">
		<id property="certificateId" column="certificateId"/>
		<result property = "resumeId" column ="resumeId"/>
		<result property = "year" column = "year"/>
		<result property = "month" column = "month" />
		<result property = "certificateName" column = "certificateName" />
		<result property = "remarks" column = "remarks" />
 	</resultMap>
 	
 	<select id="allCertificateById" parameterType="String" resultMap="CertificateResult">
 		 select *
 		 from Certificate
 		 where resumeId = #{resumeId}		
 	</select>
 	
 	<insert id="insertCertificate" parameterType="vo.Certificate">
 		insert into Certificate(certificateId, resumeId, year, month, certificateName, remarks)
 		values(
 			#{certificateId}, 
 			#{resumeId}, 
 			#{year, jdbcType=VARCHAR}, 
 			#{month, jdbcType=VARCHAR}, 
 			#{certificateName, jdbcType=VARCHAR}, 
 			#{remarks, jdbcType=VARCHAR}
 		)
 	</insert>
 	
 	<update id="updateCertificate" parameterType="vo.Certificate">
 		update Certificate
 		set resumeId = #{resumeId},
 			year = #{year},
 			month = #{month},
 			certificateName = #{certificateName},
 			remarks = #{remarks}
 		where certificateId = #{certificateId}
 	</update>
 	
 	<update id="mergeCertificate" parameterType="vo.Certificate">
 		MERGE INTO Certificate A
		USING (
			select 
				#{certificateId} certificateId, 
	 			#{resumeId} resumeId, 
	 			#{year, jdbcType=VARCHAR} year, 
	 			#{month, jdbcType=VARCHAR} month, 
	 			#{certificateName, jdbcType=VARCHAR} certificateName, 
	 			#{remarks, jdbcType=VARCHAR} remarks
			from dual
		) B
		ON (A.certificateId = B.certificateId)
		WHEN MATCHED THEN
			update set
 				year = #{year, jdbcType=VARCHAR},
 				month = #{month, jdbcType=VARCHAR},
 				certificateName = #{certificateName, jdbcType=VARCHAR},
 				remarks = #{remarks, jdbcType=VARCHAR}
 		WHEN NOT MATCHED THEN
 			INSERT (
 				A.certificateId, A.resumeId, A.year, A.month, A.certificateName, A.remarks) 
 			VALUES(
 				#{certificateId}, 
	 			#{resumeId}, 
	 			#{year, jdbcType=VARCHAR}, 
	 			#{month, jdbcType=VARCHAR}, 
	 			#{certificateName, jdbcType=VARCHAR}, 
	 			#{remarks, jdbcType=VARCHAR}
 			)
 	</update>
 	
 	<delete id="deleteCertificateById" parameterType="String">
 		delete from Certificate
 		where resumeId = #{loginId}
 	</delete>
</mapper>